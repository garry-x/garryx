<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Garry&#39;s Blog</title>
  
  <subtitle>记录生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-19T03:07:13.413Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Garry Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页表项详解</title>
    <link href="http://yoursite.com/2017/10/26/%E9%A1%B5%E8%A1%A8%E9%A1%B9%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/10/26/%E9%A1%B5%E8%A1%A8%E9%A1%B9%E8%AF%A6%E8%A7%A3/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2020-01-19T03:07:13.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><p>以下介绍基于IA-32e (x86_64)，参考 “Intel® 64 and IA-32 Architectures Software Developer’s Manual”</p><p>页表是实现地址翻译的重要结构，其中，Page Table Entry (PTE)存储了页帧的物理地址和控制标记，了解PTE的详细结构对理解访存过程中的权限控制、缺页处理等机制都有着重要的意义。</p><h3 id="PTE的内部结构如下图所示："><a href="#PTE的内部结构如下图所示：" class="headerlink" title="PTE的内部结构如下图所示："></a>PTE的内部结构如下图所示：</h3><p><img src="/images/ptev2.png" alt=""></p><h3 id="关键控制位的详细解释"><a href="#关键控制位的详细解释" class="headerlink" title="关键控制位的详细解释"></a>关键控制位的详细解释</h3><table><thead><tr><th align="left">比特位</th><th align="left">简称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">P</td><td align="left">表示页帧是否存在；如果P值为0，访问该页帧将触发 Page Fault</td></tr><tr><td align="left">1</td><td align="left">R/W</td><td align="left">表示页帧的读写权限；如果值为0，表示页帧不能被修改（R/W生效，依赖CR0 Write Protect比特置位</td></tr><tr><td align="left">2</td><td align="left">U/S</td><td align="left">表示页帧对用户态和内核态访问的限制；如果值为0， 不允许用户态访问</td></tr><tr><td align="left">3</td><td align="left">PWT</td><td align="left">PAT，PCD和PWT位组成Page Attribute Table的索引，表示页帧的缓存模式</td></tr><tr><td align="left">4</td><td align="left">PCD</td><td align="left">见PWT说明</td></tr><tr><td align="left">5</td><td align="left">A</td><td align="left">表示PTE是否被访问过；若处理器在地址翻译的过程中使用了该PTE，则置位该PTE的A位</td></tr><tr><td align="left">6</td><td align="left">D</td><td align="left">表示页帧被修改过；若处理器发现对线性地址的写操作，置位对应PTE的D位</td></tr><tr><td align="left">7</td><td align="left">PAT</td><td align="left">见PWT说明</td></tr><tr><td align="left">8</td><td align="left">G</td><td align="left">表示页帧为全局页，TLB中该页帧对应的地址转换，不会在进程切换时清空</td></tr></tbody></table><ul><li>A位和D位只能由软件清除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下介绍基于IA-32e (x86_64)，参考 “Intel® 64 and IA-32 Architectures Software Developer’s Manual”&lt;/p&gt;
&lt;p&gt;页表是实现地址翻译的重要结构
      
    
    </summary>
    
    
      <category term="x86" scheme="http://yoursite.com/categories/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>x86分页模式</title>
    <link href="http://yoursite.com/2017/09/12/x86%E5%B9%B3%E5%8F%B0%E5%88%86%E9%A1%B5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/09/12/x86%E5%B9%B3%E5%8F%B0%E5%88%86%E9%A1%B5%E6%A8%A1%E5%BC%8F/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2020-01-19T03:06:28.483Z</updated>
    
    <content type="html"><![CDATA[<p>x86体系结构下对于4K Page支持三种分页模式：4级64-bit，3级64bit 和 2级32bit。使用大页会产生更多的paging mode，这里不做介绍。</p><p><strong>1) 4级64-bit：IA-32e （long mode) 模式下使用该paging mode</strong></p><ul><li>每级页表项均为64bit，CR3存储PML4 Table基地址</li></ul><p><img src="/images/paging_64_4.png" alt=""></p><p><strong>2) 3级64-bit：IA-32模式下，开启PAE 关闭PSE，使用该paging mode</strong></p><ul><li>每级页表项均为64bit，CR3存储PDPT Table基地址</li><li>每个逻辑处理器维护四个PDPTE寄存器，寄存器的值由CR3指向的地址读取</li></ul><p><img src="/images/paging_64_3.png" alt=""></p><p><strong>3) 2级32bit：IA-32模式下，关闭PAE，关闭PSE，使用该paging mode</strong></p><ul><li>每级页表项均为32bit，CR3存储PD Table基地址</li></ul><p><img src="/images/paging_32_2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;x86体系结构下对于4K Page支持三种分页模式：4级64-bit，3级64bit 和 2级32bit。使用大页会产生更多的paging mode，这里不做介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 4级64-bit：IA-32e （long mode) 模式下使用该pa
      
    
    </summary>
    
    
      <category term="x86" scheme="http://yoursite.com/categories/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>MSI中断</title>
    <link href="http://yoursite.com/2017/03/17/MSI%E4%B8%AD%E6%96%AD/"/>
    <id>http://yoursite.com/2017/03/17/MSI%E4%B8%AD%E6%96%AD/</id>
    <published>2017-03-16T16:00:00.000Z</published>
    <updated>2020-01-19T03:06:11.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用I-O-APIC控制中断有如下的几个问题"><a href="#用I-O-APIC控制中断有如下的几个问题" class="headerlink" title="用I/O APIC控制中断有如下的几个问题:"></a>用I/O APIC控制中断有如下的几个问题:</h3><ul><li>设备需要连接到I/O APIC的IRQ line才能触发中断</li><li>多个设备共享IRQ line导致中断触发时OS需要调用多个中断处理程序</li><li>在内存写操作完成前，CPU收到设备发送的对应中断（写操作可能在队列中）</li></ul><h3 id="Message-Signaled-Interrupts（MSI）"><a href="#Message-Signaled-Interrupts（MSI）" class="headerlink" title="Message Signaled Interrupts（MSI）"></a>Message Signaled Interrupts（MSI）</h3><p>MSI最早在PCI 版本2.2.提出，MSI解决了APIC的问题，设备想要发送MSI 中断，只需要向CPU发送对中断消息，CPU内的LAPIC捕获到该消息即交给CPU处理。</p><p>测试数据显示，使用MSI，中断处理延时相对于APIC有3倍提升，相对于传统的XT-PIC (8259)有7倍提升</p><p><img src="/images/msi.png" alt=""></p><p>参考：<br>Reducing Interrupt Latency Through the Use of Message Signaled Interrupts， by Intel Corporation</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用I-O-APIC控制中断有如下的几个问题&quot;&gt;&lt;a href=&quot;#用I-O-APIC控制中断有如下的几个问题&quot; class=&quot;headerlink&quot; title=&quot;用I/O APIC控制中断有如下的几个问题:&quot;&gt;&lt;/a&gt;用I/O APIC控制中断有如下的几个问题:
      
    
    </summary>
    
    
      <category term="x86" scheme="http://yoursite.com/categories/x86/"/>
    
    
  </entry>
  
  <entry>
    <title>高级可编程中断控制器</title>
    <link href="http://yoursite.com/2017/03/16/%E9%AB%98%E7%BA%A7%E5%8F%AF%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2017/03/16/%E9%AB%98%E7%BA%A7%E5%8F%AF%E7%BC%96%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2017-03-15T16:00:00.000Z</published>
    <updated>2020-01-19T03:07:28.875Z</updated>
    
    <content type="html"><![CDATA[<p>高级可编程中断控制器（Advanced Programmable Interrupt Controller）</p><p><img src="/images/APIC.png" alt=""></p><p>APIC由两部分构成，Local APIC 在CPU内部，I/O APIC在主板芯片组内，I/O APIC和LAPIC通过总线连接。</p><h3 id="I-O-APIC"><a href="#I-O-APIC" class="headerlink" title="I/O APIC"></a>I/O APIC</h3><p>触发中断的外部设备需要连接到I/O APIC 设备的某个IRQ line上，I/O APIC内的Interrupt Redirection Table记录了IRQ Line与中断Vector的对应关系、中断的优先级、目标CPU、以及CPU的选取策略。</p><p>I/O APIC 支持两种选取策略：</p><ul><li>静态策略：按照IRT中配置的目标CPU/CPU集合分发中断</li><li>动态策略：使用Round-Robin方式，分发中断至各个CPU上</li></ul><h3 id="Local-APIC"><a href="#Local-APIC" class="headerlink" title="Local APIC"></a>Local APIC</h3><p>通过I/O APIC 路由过来的中断会传送至LAPIC，LAPIC通知CPU进行处理。LAPIC也会处理CPU触发的处理器间中断（Inter-processor Interrupts）。</p><p>参考：<br>Understanding the Linux Kernel，3rd Editon，by Marco Cesati, Daniel P. Bovet</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;高级可编程中断控制器（Advanced Programmable Interrupt Controller）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/APIC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;APIC由两部分构成，Local APIC 在CPU内部，I/O
      
    
    </summary>
    
    
      <category term="x86" scheme="http://yoursite.com/categories/x86/"/>
    
    
  </entry>
  
</feed>
